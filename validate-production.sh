#!/bin/bash

# Script de validation pre-production pour MediScribe
# Ce script v√©rifie que le projet est pr√™t pour le d√©ploiement

echo "üîç VALIDATION PRE-PRODUCTION - MediScribe"
echo "=========================================="
echo ""

# Compteur d'erreurs
ERRORS=0
WARNINGS=0

# Couleurs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# 1. V√©rifier les variables d'environnement critiques
echo "1Ô∏è‚É£  V√©rification des variables d'environnement..."

if [ -f ".env.local" ]; then
    echo -e "${GREEN}‚úì${NC} Fichier .env.local trouv√©"
    
    # V√©rifier SUPABASE_URL
    if grep -q "VITE_SUPABASE_URL=" .env.local && ! grep -q "VITE_SUPABASE_URL=https://your-project.supabase.co" .env.local; then
        echo -e "${GREEN}‚úì${NC} VITE_SUPABASE_URL configur√©"
    else
        echo -e "${RED}‚úó${NC} VITE_SUPABASE_URL non configur√© ou avec valeur par d√©faut"
        ERRORS=$((ERRORS + 1))
    fi
    
    # V√©rifier ENCRYPTION_KEY
    if grep -q "VITE_ENCRYPTION_KEY=" .env.local && ! grep -q "VITE_ENCRYPTION_KEY=your-secure" .env.local; then
        KEY_LENGTH=$(grep "VITE_ENCRYPTION_KEY=" .env.local | cut -d'=' -f2 | wc -c)
        if [ $KEY_LENGTH -ge 32 ]; then
            echo -e "${GREEN}‚úì${NC} VITE_ENCRYPTION_KEY configur√© (longueur: $KEY_LENGTH caract√®res)"
        else
            echo -e "${YELLOW}‚ö†${NC} VITE_ENCRYPTION_KEY trop court (minimum 32 caract√®res)"
            WARNINGS=$((WARNINGS + 1))
        fi
    else
        echo -e "${RED}‚úó${NC} VITE_ENCRYPTION_KEY non configur√©"
        ERRORS=$((ERRORS + 1))
    fi
else
    echo -e "${YELLOW}‚ö†${NC} Fichier .env.local non trouv√© (OK pour d√©ploiement platform)"
    WARNINGS=$((WARNINGS + 1))
fi

echo ""

# 2. V√©rifier la version du projet
echo "2Ô∏è‚É£  V√©rification de la version..."
VERSION=$(grep '"version"' package.json | cut -d'"' -f4)
if [ "$VERSION" != "0.0.0" ]; then
    echo -e "${GREEN}‚úì${NC} Version du projet: $VERSION"
else
    echo -e "${YELLOW}‚ö†${NC} Version du projet toujours √† 0.0.0"
    WARNINGS=$((WARNINGS + 1))
fi

echo ""

# 3. V√©rifier les d√©pendances
echo "3Ô∏è‚É£  V√©rification des d√©pendances..."
if [ -d "node_modules" ]; then
    echo -e "${GREEN}‚úì${NC} node_modules pr√©sent"
else
    echo -e "${RED}‚úó${NC} node_modules manquant - ex√©cuter 'npm install'"
    ERRORS=$((ERRORS + 1))
fi

# V√©rifier les vuln√©rabilit√©s
echo "   Audit de s√©curit√© des d√©pendances..."
AUDIT_OUTPUT=$(npm audit --production 2>&1)
CRITICAL=$(echo "$AUDIT_OUTPUT" | grep -o "[0-9]* critical" | cut -d' ' -f1)
HIGH=$(echo "$AUDIT_OUTPUT" | grep -o "[0-9]* high" | cut -d' ' -f1)

if [ -z "$CRITICAL" ]; then CRITICAL=0; fi
if [ -z "$HIGH" ]; then HIGH=0; fi

if [ $CRITICAL -gt 0 ] || [ $HIGH -gt 0 ]; then
    echo -e "${YELLOW}‚ö†${NC} Vuln√©rabilit√©s d√©tect√©es: $CRITICAL critical, $HIGH high"
    WARNINGS=$((WARNINGS + 1))
else
    echo -e "${GREEN}‚úì${NC} Aucune vuln√©rabilit√© critique"
fi

echo ""

# 4. Tester la compilation
echo "4Ô∏è‚É£  Test de compilation..."
if npm run build > /dev/null 2>&1; then
    echo -e "${GREEN}‚úì${NC} Build r√©ussi"
    
    # V√©rifier la taille du build
    if [ -d "dist" ]; then
        SIZE=$(du -sh dist | cut -f1)
        echo -e "${GREEN}‚úì${NC} Taille du build: $SIZE"
    fi
else
    echo -e "${RED}‚úó${NC} √âchec du build"
    ERRORS=$((ERRORS + 1))
fi

echo ""

# 5. V√©rifier les tests
echo "5Ô∏è‚É£  V√©rification des tests..."
if command -v npm &> /dev/null; then
    if npm run test -- --run > /dev/null 2>&1; then
        echo -e "${GREEN}‚úì${NC} Tests pass√©s"
    else
        echo -e "${YELLOW}‚ö†${NC} Certains tests ont √©chou√©"
        WARNINGS=$((WARNINGS + 1))
    fi
else
    echo -e "${YELLOW}‚ö†${NC} npm non disponible pour ex√©cuter les tests"
fi

echo ""

# 6. V√©rifier les fichiers de configuration de d√©ploiement
echo "6Ô∏è‚É£  V√©rification des configurations de d√©ploiement..."

if [ -f "vercel.json" ]; then
    echo -e "${GREEN}‚úì${NC} vercel.json pr√©sent"
else
    echo -e "${YELLOW}‚ö†${NC} vercel.json manquant"
    WARNINGS=$((WARNINGS + 1))
fi

if [ -f "netlify.toml" ]; then
    echo -e "${GREEN}‚úì${NC} netlify.toml pr√©sent"
else
    echo -e "${YELLOW}‚ö†${NC} netlify.toml manquant"
    WARNINGS=$((WARNINGS + 1))
fi

echo ""

# 7. V√©rifier les fichiers sensibles non commit√©s
echo "7Ô∏è‚É£  V√©rification des fichiers sensibles..."
SENSITIVE_FILES=0

if [ -f ".env" ] && ! grep -q ".env" .gitignore; then
    echo -e "${RED}‚úó${NC} .env pr√©sent mais pas dans .gitignore"
    ERRORS=$((ERRORS + 1))
    SENSITIVE_FILES=$((SENSITIVE_FILES + 1))
fi

if [ -f "cookies.txt" ]; then
    echo -e "${YELLOW}‚ö†${NC} cookies.txt pr√©sent (devrait √™tre ignor√©)"
    WARNINGS=$((WARNINGS + 1))
fi

if [ -f ".api_server.pid" ] || [ -f ".cleanup_service.pid" ]; then
    echo -e "${YELLOW}‚ö†${NC} Fichiers PID pr√©sents (devrait √™tre ignor√©s)"
    WARNINGS=$((WARNINGS + 1))
fi

if [ $SENSITIVE_FILES -eq 0 ]; then
    echo -e "${GREEN}‚úì${NC} Aucun fichier sensible d√©tect√© hors .gitignore"
fi

echo ""

# 8. V√©rifier le server.mjs
echo "8Ô∏è‚É£  V√©rification du serveur backend..."
if [ -f "server.mjs" ]; then
    echo -e "${GREEN}‚úì${NC} server.mjs pr√©sent"
    
    # V√©rifier les imports de s√©curit√©
    if grep -q "helmet" server.mjs && grep -q "rateLimit" server.mjs; then
        echo -e "${GREEN}‚úì${NC} Mesures de s√©curit√© d√©tect√©es"
    else
        echo -e "${YELLOW}‚ö†${NC} Certaines mesures de s√©curit√© manquantes"
        WARNINGS=$((WARNINGS + 1))
    fi
else
    echo -e "${RED}‚úó${NC} server.mjs manquant"
    ERRORS=$((ERRORS + 1))
fi

echo ""

# R√©sum√© final
echo "=========================================="
echo "üìä R√âSUM√â"
echo "=========================================="

if [ $ERRORS -eq 0 ] && [ $WARNINGS -eq 0 ]; then
    echo -e "${GREEN}‚úÖ PARFAIT !${NC} Le projet est pr√™t pour la production"
    echo ""
    echo "üöÄ Vous pouvez d√©ployer en toute s√©curit√©"
    exit 0
elif [ $ERRORS -eq 0 ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  ATTENTION${NC} - $WARNINGS avertissement(s)"
    echo ""
    echo "Le projet peut √™tre d√©ploy√© mais certains points m√©ritent attention"
    exit 0
else
    echo -e "${RED}‚ùå ERREURS D√âTECT√âES${NC} - $ERRORS erreur(s), $WARNINGS avertissement(s)"
    echo ""
    echo "‚õî Corrigez les erreurs avant de d√©ployer"
    exit 1
fi
